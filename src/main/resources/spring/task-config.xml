<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
	">

	<task:annotation-driven executor="taskExecutor" scheduler="taskScheduler" />
    
	<!--
		- ABORT				: Exception Throw (Default)
		- CALLER_RUNS		: 해당 Application이 과부하 상태일 경우 TaskExecutor에 의해서가 아닌 Thread에서 직접 Task를 실행시킬 수 있게 한다
		- DISCARD			: 해당 Application이 과부하 상태일 경우 현재 Task의 실행을 Skip
		- DISCARD_OLDEST	: 해당 Application이 과부하 상태일 경우 Queue의 Head에 있는 Task의 실행을 Skip
	-->    
	<task:executor id="taskExecutor" pool-size="5-50" queue-capacity="10" keep-alive="120" rejection-policy="CALLER_RUNS" />
	
	<task:scheduler id="taskScheduler" pool-size="5" />
		
</beans>
